" Build options {{{ "
let s:root = expand('<sfile>:h').'/'
"let &makeprg="cmake --build build -j8"

" Cmake
"let g:cmake_install_prefix
let g:cmake_build_type = "Debug"
let g:cmake_cxx_compiler = "custom_compiler"
let g:cmake_c_compiler = "custom_compiler"
let g:cmake_usr_args = "-DCUSTOM_ARGS=ON"
let g:make_arguments = "-j8"
let g:cmake_reload_after_save = 1
" Create link on <build_folder>/compile_commands.json to <root_folder>/compile_commands.json

" find alternatives
let g:alternateSearchPath = 'sfr:./include,sfr:./src/'

" find custim code checks
let g:ale_cpp_cpplint_executable = './scripts/cpplint.py'
let g:ale_cpp_cpplint_options = '--linelength=160 --counting=detailed --filter="-readability/fn_size,-runtime/explicit"'

" clear all the items
call g:quickmenu#reset()

call g:quickmenu#header('Test app')

call g:quickmenu#append('# Run', '')

call g:quickmenu#append('Stack overrun', '!./bin/'.g:cmake_build_type.'/stack_overrun "Hello world!"', 'Run stack overrun')

call g:quickmenu#append('# Debug', '')

call g:quickmenu#append('GDB Stack overrun', 'VBGstartGDB ./bin/'.g:cmake_build_type.'/stack_overrun "Hello world!"', 'Debug application with gdb')
" Fix for lldb args
call g:quickmenu#append('LLDB Stack overrun', 'call vebugger#lldb#start("./bin/'.g:cmake_build_type.'/stack_overrun", {"args": ["Hello world!"]})', 'Debug application with gdb')


